//----------------------------------------------------------
//  This code was generated by tapiro.
//  Changes to this file may cause incorrect behavior
//  and will be lost if the code is regenerated.
//----------------------------------------------------------

package tapiroexample
import tapiroexample.school._
import cats.effect._
import cats.implicits._
import cats.data.NonEmptyList
import org.http4s._
import org.http4s.server.Router
import sttp.tapir.server.http4s._
import sttp.tapir.Codec.{JsonCodec, PlainCodec}

object SchoolControllerHttp4sEndpoints {

  def routes[F[_]: Sync, AuthToken](controller: SchoolController[F, AuthToken])(
      implicit codec1: JsonCodec[List[School]],
      codec2: JsonCodec[School],
      codec3: JsonCodec[SchoolReadError.NotFound.type],
      codec4: JsonCodec[SchoolCreateError.InvalidLocation.type],
      codec5: PlainCodec[String],
      cs: ContextShift[F]
  ): HttpRoutes[F] = {
    val endpoints = SchoolControllerEndpoints.create[AuthToken]()
    val list =
      RichHttp4sHttpEndpoint[Unit, Nothing, List[School], F](endpoints.list)
        .toRoutes(_ => controller.list)
    val read = RichHttp4sHttpEndpoint(endpoints.read).toRoutes(controller.read)
    val create =
      RichHttp4sHttpEndpoint(endpoints.create).toRoutes(controller.create)
    Router(
      "/SchoolController" -> NonEmptyList(list, List(read, create)).reduceK
    )
  }
}
